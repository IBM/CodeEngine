#!/bin/bash

# Env Vars:
# REGISTRY: name of the image registry/namespace to get the images

# Clean up previous run
function clean() {
  set +ex
  echo Cleaning...
  (
  ibmcloud ce app delete -n cm-app-env -f
  ibmcloud ce configmap delete -n cm-config-env -f
  rm -f out
  ) > /dev/null 2>&1
}

clean
[[ "$1" == "clean" ]] && exit 0

set -ex
export REGISTRY=${REGISTRY:-icr.io/codeengine}

# Create a ConfigMap with all possible ways of populating the data:
# 1 - literal name/value pair from command line
# 2 - name/value pairs read from a file
# 3 - name/value pair wherer 'value' is the contents of a file (twice)

ibmcloud ce configmap create --name cm-config-env \
  --from-literal MY_CONFIG_KNOB=42 \
  --from-env-file data \
  --from-file file \
  --from-file MY_FILE=file

# Create the app
ibmcloud ce app create -n cm-app-env --image ${REGISTRY}/ce-config-env \
  --cpu 0.125 \
  --memory 0.25G \
  --env-from-configmap cm-config-env

# Get the URL of the app for later use
URL=$(ibmcloud ce app get -n cm-app-env -o url)

# Just force it to log something by hitting it
curl -fs $URL

# Now check the logs to see if the env vars were set
ibmcloud ce app logs -n cm-app-env | tee out
[[ "${PIPESTATUS[0]}" == "0" ]]
grep MY_ out
if (( $(grep MY_ out | wc -l) != 4 )); then
  echo "Unexpected output"
  exit 1
fi

# Check to see if the context of "file" are assign to the "file" env var.
if (( $(grep '^file=In Congress' out | wc -l) != 1 )); then
  echo "Unexpected output"
  exit 1
fi

# Clean up
clean
