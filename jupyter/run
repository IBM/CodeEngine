#!/bin/bash
set -eo pipefail

# Customizable vars
CLEANUP_ON_ERROR=${CLEANUP_ON_ERROR:=true}
CLEANUP_ON_SUCCESS=${CLEANUP_ON_SUCCESS:=true}
REGION="${REGION:=eu-es}"
NAME_PREFIX="${NAME_PREFIX:=jupyter}"
DEBUG="${DEBUG:=false}"
BRAVE_MODE="${BRAVE_MODE:=false}"

# Static variables
RESOURCE_GROUP_NAME="jupyter-notebooks--rg"
COS_INSTANCE_NAME=jupyter-notebooks--cos
CE_PROJECT_NAME="jupyter-notebooks-${REGION}--ce"
CE_APP_NOTEBOOK="${NAME_PREFIX}-notebook"
CE_APP_PROXY="${NAME_PREFIX}-proxy"
CE_APP_AUTH="${NAME_PREFIX}-auth"
CE_SECRET_AUTH="${NAME_PREFIX}-auth-credentials"


# ==============================
# COMMON FUNCTIONS
# ==============================
RED="\033[31m"
BLUE="\033[94m"
GREEN="\033[32m"
ENDCOLOR="\033[0m"

function print_error {
    echo -e "${RED}\n==========================================${ENDCOLOR}"
    echo -e "${RED} FAILED${ENDCOLOR}"
    echo -e "${RED}==========================================\n${ENDCOLOR}"
    echo -e "${RED}$1${ENDCOLOR}"
    echo ""
}
function print_msg {
    echo -e "${BLUE}$1${ENDCOLOR}"
}
function print_success {
    echo -e "${GREEN}$1${ENDCOLOR}"
}

# Helper function to check whether prerequisites are installed
function check_prerequisites {
    # Ensure that jq tool is installed
    if ! command -v jq &>/dev/null; then
        print_error "'jq' tool is not installed"
        exit 1
    fi
    echo "Done!"
}

# Clean up previous run
function clean() {
    # cleanup everything within this resource group

    ibmcloud ce project delete --name ${CE_PROJECT_NAME} --hard --force 2>/dev/null

    ibmcloud resource group $RESOURCE_GROUP_NAME --quiet 2>/dev/null
    if [[ $? == 0 ]]; then
        COUNTER=0
        # some resources (e.g. boot volumes) are deleted with some delay. Hence, the script waits before exiting with an error
        while (($(ibmcloud resource service-instances --type all -g $RESOURCE_GROUP_NAME --output json | jq -r '. | length') > 0)); do
            sleep 5
            COUNTER=$((COUNTER + 1))
            if ((COUNTER > 30)); then
                print_error "Cleanup failed! Please make sure to delete remaining resources manually to avoid unwanted charges."
                ibmcloud resource service-instances --type all -g $RESOURCE_GROUP_NAME
                exit 1
            fi
        done
    fi

    ibmcloud resource group-delete $RESOURCE_GROUP_NAME --force 2>/dev/null
    
    echo "Done!"
}

function ensure_plugin_is_up_to_date() {
    echo "Checking $1 ..."
    # check whether plugin is installed
    if ! ibmcloud plugin show $1 -q >/dev/null; then
        # install it
        ibmcloud plugin install $1 -f --quiet
    else 
        # check whether there is an update available
        ibmcloud plugin update $1 -f --quiet
    fi
}

# ==============================
# MAIN SCRIPT FLOW
# ==============================
startTime=$(date +%s)

print_msg "\n======================================================"
print_msg " Setting up \"Jupyter on Code Engine \" sample"
print_msg "======================================================\n"

echo ""
echo "Please note: This script will install various IBM Cloud resources within the resource group '$RESOURCE_GROUP_NAME'."

print_msg "\nChecking prerequisites ..."
check_prerequisites

# Ensure that latest versions of used IBM Cloud ClI is installed
print_msg "\nPulling latest IBM Cloud CLI release ..."
ibmcloud update --force
echo "Done!"

# Ensure that latest versions of used IBM Cloud CLI plugins are installed
print_msg "\nInstalling required IBM Cloud CLI plugins ..."
ensure_plugin_is_up_to_date code-engine
ensure_plugin_is_up_to_date cloud-object-storage
echo "Done!"

if [[ "$1" == "clean" ]]; then
    print_msg "\nCleaning up the remains of previous executions ..."
    clean
    print_success "\n==========================================\n DONE\n==========================================\n"
    exit 0
fi

#
# Create the resource group, if it does not exist
if ! ibmcloud resource group $RESOURCE_GROUP_NAME --quiet >/dev/null 2>&1; then
    print_msg "\nCreating resource group '$RESOURCE_GROUP_NAME' ..."
    ibmcloud resource group-create $RESOURCE_GROUP_NAME
fi
print_msg "\nTargetting IBM Cloud resource group '$RESOURCE_GROUP_NAME' and region '$REGION'..."
ibmcloud target -g $RESOURCE_GROUP_NAME -r $REGION

#
# Create the COS instance, if it does not exist
print_msg "\nInitializing the COS instance '$COS_INSTANCE_NAME' ..."
if ! ibmcloud resource service-instance ${COS_INSTANCE_NAME} 2>/dev/null; then
    print_msg "\nCreating the COS instance '$COS_INSTANCE_NAME' ..."
    ibmcloud resource service-instance-create ${COS_INSTANCE_NAME} cloud-object-storage standard global -d premium-global-deployment-iam
fi
COS_INSTANCE_ID=$(ibmcloud resource service-instance ${COS_INSTANCE_NAME} --output json | jq -r '.[0] | .id')
ibmcloud cos config crn --crn ${COS_INSTANCE_ID} --force
ibmcloud cos config auth --method IAM
ibmcloud cos config region --region ${REGION}
ibmcloud cos config endpoint-url --url s3.${REGION}.cloud-object-storage.appdomain.cloud


print_msg "\nListing buckets of the instance ..."
buckets=$(ibmcloud cos buckets -output json)
COS_BUCKET_NAME=""
if [[ "$(echo "${buckets}" | jq -r '.Buckets')" != "null" ]]; then
    echo "Found $(echo "${buckets}" | jq -r '.Buckets|length') bucket(s):"
    for bucket in $(echo "${buckets}" | jq -r '.Buckets|.[] | @base64'); do
        _jq() {
            echo ${bucket} | base64 --decode | jq -r ${1}
        }
        bucket_name=$(_jq '.Name')
        echo "- $bucket_name"

        if [[ "$bucket_name" =~ ^ce-${REGION}-jupyter-notebooks-* ]]; then 
            COS_BUCKET_NAME=$bucket_name
        fi
    done
fi

#
# Create a COS bucket, if it does not exist
if [[ $COS_BUCKET_NAME == "" ]]; then
    random_chars=$(openssl rand -hex 6)
    COS_BUCKET_NAME=ce-${REGION}-jupyter-notebooks-${random_chars}
    print_msg "\nCreating the COS bucket '$COS_BUCKET_NAME' ..."
    ibmcloud cos bucket-create \
        --class smart \
        --region $REGION \
        --ibm-service-instance-id $COS_INSTANCE_ID \
        --bucket $COS_BUCKET_NAME
else 
    print_msg "\nUsing the COS bucket '$COS_BUCKET_NAME' ..."
    echo "Done!"
fi

opt_wait=--wait
if [[ "$BRAVE_MODE" == "true" ]]; then
    opt_wait=--no-wait
fi

#
# Create the Code Engine project, if it does not exist
print_msg "\nInitializing the Code Engine project '$CE_PROJECT_NAME' ..."
if ! ibmcloud ce proj select --name $CE_PROJECT_NAME --kubecfg 2>/dev/null; then
    print_msg "\nCreating Code Engine project '$CE_PROJECT_NAME' ..."
    ibmcloud ce proj create --name $CE_PROJECT_NAME
    ibmcloud ce proj select --name $CE_PROJECT_NAME --kubecfg 2>/dev/null
fi
CE_PROJECT=$(ibmcloud ce project current --output json)
CE_PROJECT_GUID=$(echo "$CE_PROJECT" | jq -r '.guid')
CE_PROJECT_DOMAIN=$(echo "$CE_PROJECT" | jq -r '.domain')
CE_PROJECT_NAMESPACE=$(echo "$CE_PROJECT" | jq -r '.kube_config_context')

print_msg "\nInitializing HMAC credentials to access the COS instance '$COS_INSTANCE_ID' ..."
CE_SECRET_NAME=cos-secret-$COS_BUCKET_NAME
if ibmcloud ce secret get --name $CE_SECRET_NAME --quiet >/dev/null 2>&1; then
    echo "Done! Code Engine secret '$CE_SECRET_NAME' does exist"
else

    #
    # Create the credentials to access the COS instance
    COS_HMAC_CREDENTIALS_NAME=ce-${REGION}-jupyter-cos-credentials
    print_msg "\nCreating the HMAC credentials '$COS_HMAC_CREDENTIALS_NAME' to access the COS instance ..."
    COS_HMAC_CREDENTIALS=$(ibmcloud resource service-key-create ${COS_HMAC_CREDENTIALS_NAME} Writer --instance-id $COS_INSTANCE_ID --parameters '{"HMAC":true}' --output JSON)
    COS_HMAC_CREDENTIALS_ACCESS_KEY_ID=$(echo "$COS_HMAC_CREDENTIALS"|jq -r '.credentials.cos_hmac_keys.access_key_id')
    COS_HMAC_CREDENTIALS_SECRET_ACCESS_ID=$(echo "$COS_HMAC_CREDENTIALS"|jq -r '.credentials.cos_hmac_keys.secret_access_key')

    #
    # Store the HMAC credentials in a Code Engine secret
    print_msg "\nStore the HMAC credentials in a Code Engine secret '$CE_SECRET_NAME' ..."
    ibmcloud ce secret create --name $CE_SECRET_NAME \
        --format hmac \
        --access-key-id ${COS_HMAC_CREDENTIALS_ACCESS_KEY_ID} \
        --secret-access-key ${COS_HMAC_CREDENTIALS_SECRET_ACCESS_ID}
fi

print_msg "\nInitializing the persistent storage to mount the bucket '$COS_BUCKET_NAME' ..."
CE_STORAGE_NAME=$COS_BUCKET_NAME
if kubectl get PersistentStorage $CE_STORAGE_NAME >/dev/null 2>&1; then
    echo "Done! Code Engine persistent storage '$CE_STORAGE_NAME' does exist"
else
    print_msg "\nCreating Code Engine persistent storage '$CE_STORAGE_NAME' ..."
    kubectl apply -f - <<EOF
apiVersion: codeengine.cloud.ibm.com/v1beta1
kind: PersistentStorage
metadata:
    name: $CE_STORAGE_NAME
spec:
    objectStorage:
        bucketName: $COS_BUCKET_NAME
        bucketLocation: $REGION
        secretRef: $CE_SECRET_NAME
EOF
fi

# Deploy the Code Engine app to run the notebook
print_msg "\nInitializing the jupyter notebook app '$CE_APP_NOTEBOOK' ..."
if ! ibmcloud ce app get --name $CE_APP_NOTEBOOK >/dev/null 2>&1; then
    print_msg "\nCreating the notebook app '$CE_APP_NOTEBOOK' ..."
    ibmcloud ce app create --name $CE_APP_NOTEBOOK \
        --image "icr.io/codeengine/helloworld" \
        --cpu 0.125 \
        --memory 0.25G \
        $opt_wait
else 
    echo "Done!"
fi

print_msg "\nConfiguring the volume mounts for the app '$CE_APP_NOTEBOOK' ..."
./add-volume-mount-to-app.sh $CE_APP_NOTEBOOK $CE_STORAGE_NAME /mnt/work $NAME_PREFIX
sleep 3

print_msg "\nUpdate the app '$CE_APP_NOTEBOOK' ..."
ibmcloud ce app update --name $CE_APP_NOTEBOOK \
    --image "quay.io/jupyter/minimal-notebook:latest" \
    --max-scale 1 \
    --scale-down-delay 600 \
    --cpu 1 \
    --memory 4G \
    --command "jupyter" \
    --command "notebook" \
    --command "--ip" \
    --command "*" \
    --command "--NotebookApp.allow_origin" \
    --command "*" \
    --command "--NotebookApp.token" \
    --command "''" \
    --command "--NotebookApp.password" \
    --command "''" \
    --command "--notebook-dir" \
    --command "/mnt/work" \
    --port 8888 \
    --visibility project \
    $opt_wait


ROOT_DOMAIN=.${CE_PROJECT_NAMESPACE}.${CE_PROJECT_DOMAIN}
FQDN_NOTEBOOK_APP=${CE_APP_NOTEBOOK}${ROOT_DOMAIN}
URL_NOTEBOOK_APP=https://${FQDN_NOTEBOOK_APP}

# ================================================
# OPTIONAL: Configuring Authn and Authz
# ================================================

print_msg "\nCheck whether the authentication credentials should be configured, or not ..."
if [ ! -f oidc.properties ]; then
    echo "Skipping the configuration of the authentication credentials. Specify all authz/authn properties in 'oidc.properties' to enable it."
else
    echo "Authn/Authz configuration file 'oidc.properties' found!"
    if ibmcloud ce secret get --name $CE_SECRET_AUTH >/dev/null 2>&1; then
        ibmcloud ce secret delete --name $CE_SECRET_AUTH --force
    fi
    ibmcloud ce secret create --name $CE_SECRET_AUTH \
        --from-env-file oidc.properties
fi

print_msg "\nCheck whether the authentication app should be configured, or not ..."
if ! ibmcloud ce secret get --name $CE_SECRET_AUTH >/dev/null 2>&1; then
    echo "Skipping the deployment of the authentication app"

    print_msg "\nMake sure the app '$CE_APP_NOTEBOOK' is exposed publicly ..."
    ibmcloud ce app update --name $CE_APP_NOTEBOOK --no-cluster-local
else
    echo "Yes! Setting up the authentication and the proxy apps"

    URL_AUTH_APP=https://${CE_APP_AUTH}${ROOT_DOMAIN}
    FQDN_NOTEBOOK_APP=${CE_APP_PROXY}${ROOT_DOMAIN}
    URL_NOTEBOOK_APP=https://${FQDN_NOTEBOOK_APP}

    authapp_op_create_or_update=update
    if ! ibmcloud ce app get --name $CE_APP_AUTH >/dev/null 2>&1; then
        print_msg "\nCreating the auth app '$CE_APP_AUTH' ..."
        authapp_op_create_or_update=create
    else
        print_msg "\nUpdating the auth app '$CE_APP_AUTH' ..."
    fi

    # Deploy the Code Engine app to run the OIDC authentication
    ibmcloud ce app $authapp_op_create_or_update --name $CE_APP_AUTH \
        --image "icr.io/codeengine/auth-oidc-proxy/auth" \
        --max-scale 1 \
        --cpu 0.125 \
        --memory 0.25G \
        --scale-down-delay 600 \
        --port 8080 \
        --env-from-secret $CE_SECRET_AUTH \
        --env COOKIE_DOMAIN="$ROOT_DOMAIN" \
        --env REDIRECT_URL="$URL_NOTEBOOK_APP" \
        --env OIDC_REDIRECT_URL="${URL_AUTH_APP}/auth/callback" \
        $opt_wait

    # Deploy the Code Engine app to the run the nginx reverse proxy
    proxyapp_op_create_or_update=update
    if ! ibmcloud ce app get --name $CE_APP_PROXY >/dev/null 2>&1; then
        print_msg "\nCreating the proxy app '$CE_APP_PROXY' ..."
        proxyapp_op_create_or_update=create
    else
        print_msg "\nUpdating the proxy app '$CE_APP_PROXY' ..."
    fi
    ibmcloud ce app $proxyapp_op_create_or_update --name $CE_APP_PROXY \
        --image "icr.io/codeengine/auth-oidc-proxy/nginx" \
        --max-scale 1 \
        --cpu 1 \
        --memory 2G \
        --scale-down-delay 600 \
        --env ORIGIN_APP_FQDN=$FQDN_NOTEBOOK_APP \
        --env ORIGIN_APP_NAME=$CE_APP_NOTEBOOK \
        --env AUTH_APP_NAME=$CE_APP_AUTH \
        --port 8080 \
        $opt_wait
fi

print_msg "\nThis end-to-end sample created the following set of IBM Cloud resources:"
ibmcloud resource service-instances --type all -g $RESOURCE_GROUP_NAME

if [[ "$DEBUG" == "true" ]]; then
    print_msg "\nSo far, following files have been stored in the COS bucket '$COS_BUCKET_NAME':"
    ibmcloud cos objects --bucket $COS_BUCKET_NAME
fi 

print_msg "\nFollowing apps have been created in the Code Engine project '${CE_PROJECT_NAME}':"
ibmcloud ce app list

print_msg "\nFollowing commands can be used to further play around with the sample setup:"
echo "1. Open the browser and type '$URL_NOTEBOOK_APP' to access Jupyter notebook"
echo "2. Tear down the sample setup: './run clean'"

duration=$((($(date +%s) - $startTime)))
print_success "\n================================================"
print_success " SUCCESS - Setup completed in ${duration} seconds"
print_success "================================================\n"
